datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String   @id @default(cuid()) @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  username       String?    @unique
  email          String?    @unique
  emailVerified  DateTime?
  image          String
  accounts       Account[]
  sessions       Session[]
  Activity       Activity[]
  Comment        Comment[]
  followingWorks Int[]
  watchingWorks  Int[]
  finishedWorks  Int[]
}

enum Action {
  FOLLOW
  WATCH
  FINISH
  COMMENT
}

model Activity {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  workId    Int
  workTitle String
  action    Action
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  workId    Int
  comment   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
